(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{63:function(t,a,s){"use strict";s.r(a);var n=s(0),v=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"强制类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强制类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 强制类型转换")]),s("p",[t._v("在介绍强制转换之前，不论是显式的还是隐式的，我们需要了解字符串、数字和布尔值之间类型转换的基本规则，这些规则(也叫"),s("em",[t._v("抽象操作")]),t._v(")是仅供内部使用的。")]),s("p",[s("code",[t._v("toString")])]),s("p",[t._v("抽象操作"),s("code",[t._v("toString")]),t._v("负责处理非字符串到字符串的强制类型转换。基本类型值得字符串化规则是："),s("code",[t._v("null")]),t._v("转换成"),s("code",[t._v('"null"')]),t._v("，"),s("code",[t._v("undefined")]),t._v("转换为"),s("code",[t._v('"undefined"')]),t._v("，"),s("code",[t._v("true")]),t._v("转换成"),s("code",[t._v('"true"')]),t._v("。数字的字符串化则遵循通用规则。")]),s("p",[s("code",[t._v("toNumber")])]),s("p",[t._v("抽象操作"),s("code",[t._v("toNumber")]),t._v("处理非数字值到数字值的强制类型转换。规则如下：")]),s("ul",[s("li",[s("code",[t._v("true")]),t._v("变成"),s("code",[t._v("1")]),t._v("，"),s("code",[t._v("false")]),t._v("变成"),s("code",[t._v("0")]),t._v("，"),s("code",[t._v("undefined")]),t._v("转换成"),s("code",[t._v("NaN")]),t._v("，"),s("code",[t._v("null")]),t._v("变成"),s("code",[t._v("0")])]),s("li",[t._v("对字符串的处理基本遵循数字常量的相关规则和语法，处理失败返回"),s("code",[t._v("NaN")]),t._v("。")]),s("li",[t._v("对象会首先转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。")])]),s("p",[t._v("为了将值转换为相应的基本类型值，抽象操作"),s("code",[t._v("ToPrimitive")]),t._v("首先通过内部操作"),s("code",[t._v("DefaultValue")]),t._v("检查改制是否有"),s("code",[t._v("valueOf()")]),t._v("方法，如果有并且返回基本类型值，就使用该值进行强制类型转换。如果灭有就使用"),s("code",[t._v("toString()")]),t._v("的返回值来进行强制类型转换。如果两者都没有，产生"),s("code",[t._v("TypeError")]),t._v("错误。")]),s("p",[s("code",[t._v("to Boolean")])]),s("p",[t._v("假值，即")]),s("ul",[s("li",[s("code",[t._v("undefined")])]),s("li",[s("code",[t._v("null")])]),s("li",[s("code",[t._v("false")])]),s("li",[s("code",[t._v("+0")]),t._v("、"),s("code",[t._v("-0")]),t._v(" 和 "),s("code",[t._v("NaN")])]),s("li",[s("code",[t._v('""')])])]),s("p",[t._v("都将强制转换为"),s("code",[t._v("false")]),t._v("。")]),s("p",[t._v("就算是封装了价值的封装对象，如：")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Boolean")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token boolean"}},[t._v("false")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Number")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    c "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("String")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('""')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),s("p",[s("code",[t._v("a")]),t._v("、"),s("code",[t._v("b")]),t._v("、"),s("code",[t._v("c")]),t._v("的布尔强制转换都是"),s("code",[t._v("true")]),t._v("，因为所有的对象都是真值。")]),s("p",[t._v("上述三个操作包括"),s("code",[t._v("toPrimitive")]),t._v("就是JavaScript处理类型转换的规则，有了他们，就可以更好地了解强制类型转换。")]),s("h2",{attrs:{id:"显式强制类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显式强制类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 显式强制类型转换")]),s("h3",{attrs:{id:"字符串与数字之间的显式转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串与数字之间的显式转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符串与数字之间的显式转换")]),s("p",[t._v("字符串和数字之间的转换是通过"),s("code",[t._v("String()")]),t._v("和"),s("code",[t._v("Number()")]),t._v("这两个内建函数，即原生函数来实现的。")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("42")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("String")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    c "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"3.14"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    d "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Number")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v('//"42"')]),t._v("\nconsole"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("//3.14")]),t._v("\n")])]),s("blockquote",[s("p",[t._v("注意，它们前面没有"),s("code",[t._v("new")]),t._v("关键字，并不是创建封装对象。但"),s("code",[t._v("var e = Array(1，2，3)")]),t._v("这个语句是构造一个数组对象，"),s("code",[t._v("new")]),t._v("会被自动添加。")])]),s("p",[s("code",[t._v("String()")]),t._v("遵循前面讲的"),s("code",[t._v("toString")]),t._v("规则，"),s("code",[t._v("Number()")]),t._v("遵循前面的"),s("code",[t._v("toNumber")]),t._v("规则。")]),s("p",[t._v("除了上面的方法外，还有方法可以实现两者的显式转换。")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("42")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toString")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    c "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"3.14"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    d "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("c"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),s("blockquote",[s("p",[s("code",[t._v("a.toString()")]),t._v("是显式的，不过其中涉及隐式转换。因为"),s("code",[t._v("toString()")]),t._v("对象"),s("code",[t._v("42")]),t._v("这种基本类型值不适用，所以会自动为"),s("code",[t._v("42")]),t._v("创建一个封装对象，从而调用"),s("code",[t._v("toString()")]),t._v("方法。值得注意的是，我们没有"),s("code",[t._v("toNumber()")]),t._v("方法。对于"),s("code",[t._v("d = +c")]),t._v("是通过"),s("strong",[t._v("一元运算符")]),t._v("显式地将"),s("code",[t._v("c")]),t._v("转换为数字，而非数字加法运算，也不是字符串拼接。至于说这是隐式还是显式，取决于个人理解。如果你知道这是一元运算符的形式，那就是显式。如果你不知道，你说是隐式也没有关系。但在开源社区里，一元运算符"),s("code",[t._v("+")]),t._v("普遍认为是显式。")])]),s("h4",{attrs:{id:"日期显式转换为数字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#日期显式转换为数字","aria-hidden":"true"}},[t._v("#")]),t._v(" 日期显式转换为数字")]),s("p",[t._v("一元运算符的另外一个用途是将日期"),s("code",[t._v("Date")]),t._v("对象强制类型转换为数字，返回"),s("code",[t._v("Unix")]),t._v("时间戳，以微秒为单位(即从1970年1月1日00:00:00 UTC到当前时间)：")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" timestamp "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Date")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),s("p",[t._v("当然，对于提取时间戳我们有更好的方法。")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" timestamp "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Date")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("getTime")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),s("p",[t._v("或者使用"),s("code",[t._v("ES5")]),t._v("中新加入的静态方法"),s("code",[t._v("Date.now()")]),t._v("来获取当前的时间戳。")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" timestamp "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Date"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("now")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),s("h3",{attrs:{id:"显式解析数字字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显式解析数字字符串","aria-hidden":"true"}},[t._v("#")]),t._v(" 显式解析数字字符串")]),s("p",[t._v("使用"),s("code",[t._v("parseInt()")]),t._v("方法将字符串解析为整数，"),s("code",[t._v("parseFloat()")]),t._v("方法将字符串解析为浮点数。这和将字符串强制类型转换为数字类似但不同的地方在于，"),s("strong",[t._v("解析允许字符串中含有非数字字符")]),t._v("。")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"42px"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token function"}},[t._v("Number")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("//NaN")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("//42")]),t._v("\n")])]),s("h3",{attrs:{id:"显式转换为布尔值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显式转换为布尔值","aria-hidden":"true"}},[t._v("#")]),t._v(" 显式转换为布尔值")]),s("p",[t._v("与前面的"),s("code",[t._v("String()")]),t._v("和"),s("code",[t._v("Number()")]),t._v("一样，"),s("code",[t._v("Boolean()")]),t._v("是显式的"),s("code",[t._v("toBoolean")]),t._v("强制类型转换。")]),s("p",[t._v("虽然"),s("code",[t._v("Boolean()")]),t._v("是显式的，但并不常用。大家都喜欢使用一元运算符"),s("code",[t._v("!")]),t._v("将值强制转换为布尔值，但同时它也会将假值变为真值，将真值变为假值，所以，你可以使用"),s("code",[t._v("!!")]),t._v("来做判断。")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token operator"}},[t._v("!")]),s("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),s("span",{attrs:{class:"token operator"}},[t._v("!")]),s("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("b"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])]),s("p",[t._v("在"),s("code",[t._v("if()")]),t._v("语句中，如果没有使用"),s("code",[t._v("Boolean()")]),t._v("和"),s("code",[t._v("!!")]),t._v("，就会自动隐式进行"),s("code",[t._v("toBoolean")]),t._v("转换。")]),s("hr"),s("h2",{attrs:{id:"隐式强制类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式强制类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 隐式强制类型转换")]),s("h3",{attrs:{id:"字符串和数字之间的隐式类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串和数字之间的隐式类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符串和数字之间的隐式类型转换")]),s("p",[s("code",[t._v("+")]),t._v("运算符既能用于数字加法，用能用于字符串拼接。如果"),s("code",[t._v("+")]),t._v("的其中一个操作数是字符串(或者通过一定步骤得到的字符串)，则执行字符串拼接操作。")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"42"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    c "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    d "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("4")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\na "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v('//"420"')]),t._v("\nc "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" d"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v('//"1,23,4"')]),t._v("\n")])]),s("p",[s("code",[t._v('"1,23,4"')]),t._v("是怎么来的呢，这就是"),s("em",[t._v("通过一定步骤得到的字符串")]),t._v("。在"),s("code",[t._v("ES5")]),t._v("规则中，如果其中一个操作数是对象(当然包括数组)，则首先对其调用"),s("code",[t._v("toPrimitive")]),t._v("抽象操作，该抽象操作再调用"),s("code",[t._v("[[DefaultValue]]")]),t._v("。因为数组的"),s("code",[t._v("ValueOf()")]),t._v("操作无法得到简单的基本类型值，于是它转而调用"),s("code",[t._v("toString()")]),t._v("，因此两个数组变成了"),s("code",[t._v('"1,2"')]),t._v("和"),s("code",[t._v('"3，4"')]),t._v("。"),s("code",[t._v("+")]),t._v("将她们拼接后返回"),s("code",[t._v("1,23,4")]),t._v("。")]),s("p",[t._v("依上，可以将数字和空字符串"),s("code",[t._v('""')]),t._v("和"),s("code",[t._v("+")]),t._v("来将其转换为字符串。")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("42")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('""')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v('//"42"')]),t._v("\n")])]),s("p",[s("code",[t._v('a + ""')]),t._v("与显式的"),s("code",[t._v("String(a)")]),t._v("的区别在于，"),s("code",[t._v('a + ""')]),t._v("会对"),s("code",[t._v("a")]),t._v("调用"),s("code",[t._v("valueOf()")]),t._v("方法，然后通过"),s("code",[t._v("toString")]),t._v("操作将返回值转换为字符串，而"),s("code",[t._v("String()")]),t._v("则直接调用"),s("code",[t._v("toString")]),t._v("抽象操作。所以，在定制"),s("code",[t._v("valueOf()")]),t._v("和"),s("code",[t._v("toString()")]),t._v("方法时就需要特别小心。")]),s("p",[t._v("因为"),s("code",[t._v("-")]),t._v("运算符是不会用于字符串操作的，所以可使用"),s("code",[t._v("-")]),t._v("将字符串强制类型转换为数字。")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"3.14"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("//3.14")]),t._v("\n")])]),s("h3",{attrs:{id:"隐式强制类型转换为布尔值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式强制类型转换为布尔值","aria-hidden":"true"}},[t._v("#")]),t._v(" 隐式强制类型转换为布尔值")]),s("ul",[s("li",[s("code",[t._v("if()")]),t._v("语句的条件判断表达式")]),s("li",[s("code",[t._v("for(..;..;..)")]),t._v("语句中的条件判断表达式")]),s("li",[s("code",[t._v("while()")]),t._v("和"),s("code",[t._v("do...while()")]),t._v("循环中的条件判断表达式")]),s("li",[s("code",[t._v("?:")]),t._v("中的条件判断表达式")]),s("li",[s("code",[t._v("||")]),t._v(" 、 "),s("code",[t._v("&&")]),t._v("左边的操作数")])]),s("p",[t._v("这里特地讲一下"),s("code",[t._v("||")]),t._v("和"),s("code",[t._v("&&")]),t._v("，这与其他语言("),s("code",[t._v("C")]),t._v("、"),s("code",[t._v("PHP")]),t._v(")中的完全不同。在"),s("code",[t._v("JavaScript")]),t._v("返回值是两个操作数其中的一个。")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("42")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"abc"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    c "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("null")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\na "),s("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" b"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("//42")]),t._v("\nc "),s("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" b"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v('//"abc"')]),t._v("\n\na "),s("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" b"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v('//"abc"')]),t._v("\nc "),s("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" b"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("//null")]),t._v("\n")])]),s("p",[s("code",[t._v("||")]),t._v("和"),s("code",[t._v("&&")]),t._v("首先会对第一个操作数执行条件判断，如果其不是布尔值就先进行"),s("code",[t._v("toBoolean")]),t._v("强制类型转换，再执行条件判断。")]),s("ul",[s("li",[s("p",[t._v("对"),s("code",[t._v("||")]),t._v("来说，如果条件判断结果为"),s("code",[t._v("true")]),t._v("就返回第一个操作数的值，如果为"),s("code",[t._v("false")]),t._v("就返回第二个操作数的值。")])]),s("li",[s("p",[t._v("对"),s("code",[t._v("&&")]),t._v("来说，刚好相反。判断条件为"),s("code",[t._v("true")]),t._v("就返回第二个操作数的值，如果为"),s("code",[t._v("false")]),t._v("就返回第一个操作数的值。")])])]),s("p",[t._v("所以，基于上述原理，我们有了一种设置默认值的方法，很是方便。")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("foo")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),s("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"world"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    console"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("foo")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v('// "hello world"')]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("foo")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"yeah"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"yeah!"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v('//"yeah yeah!"')]),t._v("\n")])]),s("p",[s("code",[t._v("&&")]),t._v("常用语"),s("code",[t._v("JavaScript")]),t._v("代码压缩工具。")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("foo")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a  "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("42")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),s("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("foo")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),s("blockquote",[s("p",[s("code",[t._v("foo()")]),t._v("只有在条件判断"),s("code",[t._v("a")]),t._v("通过是才会被调用，如果为通过，"),s("code",[t._v("a && foo()")]),t._v("就会"),s("em",[t._v("短路")]),t._v("，"),s("code",[t._v("foo()")]),t._v("不会被调用。开发人员通常会使用"),s("code",[t._v("if (a){foo();}")]),t._v("这种写法，但压缩工具通常使用"),s("code",[t._v("a && foo()")]),t._v("，因为更简洁。")])]),s("hr"),s("h2",{attrs:{id:"vs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vs","aria-hidden":"true"}},[t._v("#")]),t._v(" == vs ===")]),s("p",[t._v("宽松相等"),s("code",[t._v("==")]),t._v("和严格相等"),s("code",[t._v("===")]),t._v("用来判断两个值是否"),s("em",[t._v("相等")]),t._v("。")]),s("p",[t._v("正确的解释是："),s("strong",[s("code",[t._v("==")]),t._v("允许在相等比较中进行强制类型转换，而"),s("code",[t._v("===")]),t._v("不可以")]),t._v("。")]),s("blockquote",[s("p",[t._v("有些人会认为说"),s("code",[t._v("==")]),t._v("检查值是否相等，"),s("code",[t._v("===")]),t._v("检查值和类型是否相等。这是不正确的理解。")])]),s("p",[s("code",[t._v("ES5")]),t._v("规范中使用"),s("em",[t._v("抽象相等比较算法")]),t._v("定义了"),s("code",[t._v("==")]),t._v("运算符的行为。")]),s("ul",[s("li",[t._v("如果两个值的类型相同，仅比较他们是否相等")]),s("li",[t._v("两个对象指向同一值时，即视为相等，不发生强制类型转换")]),s("li",[t._v("两个不同类型的值是会发生隐式强制类型转换")])]),s("blockquote",[s("p",[t._v("特殊例子有："),s("code",[t._v("NaN")]),t._v("不等于"),s("code",[t._v("NaN")]),t._v("，"),s("code",[t._v("+0")]),t._v("不等于"),s("code",[t._v("-0")]),t._v("。")])]),s("h3",{attrs:{id:"字符串和数字之间的相等比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串和数字之间的相等比较","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符串和数字之间的相等比较")]),s("p",[s("code",[t._v("ES5")]),t._v("规范11.9.3.4-5这样定义：")]),s("ul",[s("li",[t._v("如果"),s("code",[t._v("Type(x)")]),t._v("是数字，"),s("code",[t._v("Type(y)")]),t._v("是字符串，则返回"),s("code",[t._v("x == toNumber(y)")]),t._v("的结果")]),s("li",[t._v("如果"),s("code",[t._v("Type(x)")]),t._v("是字符串，"),s("code",[t._v("Type(y)")]),t._v("是数字，则返回"),s("code",[t._v("toNumber(x) == y")]),t._v("的结果")])]),s("h3",{attrs:{id:"其他类型和布尔类型之间的相等比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他类型和布尔类型之间的相等比较","aria-hidden":"true"}},[t._v("#")]),t._v(" 其他类型和布尔类型之间的相等比较")]),s("p",[s("code",[t._v("ES5")]),t._v("规范11.9.3.6-7这样定义：")]),s("ul",[s("li",[t._v("如果"),s("code",[t._v("Type(x)")]),t._v("是布尔类型，则返回"),s("code",[t._v("toNumber(x) == y")]),t._v("的结果")]),s("li",[t._v("如果"),s("code",[t._v("Type(y)")]),t._v("是布尔类型，则返回"),s("code",[t._v("x == toNumber(y)")]),t._v("的结果")])]),s("h3",{attrs:{id:"null和undefined之间的相等比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null和undefined之间的相等比较","aria-hidden":"true"}},[t._v("#")]),t._v(" null和undefined之间的相等比较")]),s("p",[s("code",[t._v("ES5")]),t._v("规范11.9.3.2-3这样定义：")]),s("ul",[s("li",[t._v("如果"),s("code",[t._v("x")]),t._v("为"),s("code",[t._v("null")]),t._v("，"),s("code",[t._v("y")]),t._v("为"),s("code",[t._v("undefined")]),t._v("，则结果为"),s("code",[t._v("true")])]),s("li",[t._v("如果"),s("code",[t._v("x")]),t._v("为"),s("code",[t._v("undefined")]),t._v("，"),s("code",[t._v("y")]),t._v("为"),s("code",[t._v("null")]),t._v("，则结果为"),s("code",[t._v("true")])])]),s("h3",{attrs:{id:"对象与非对象之间的相等比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象与非对象之间的相等比较","aria-hidden":"true"}},[t._v("#")]),t._v(" 对象与非对象之间的相等比较")]),s("p",[s("code",[t._v("ES5")]),t._v("规范11.9.3.8-9这样定义：")]),s("ul",[s("li",[t._v("如果"),s("code",[t._v("Type(x)")]),t._v("是数字或字符串，"),s("code",[t._v("Type(y)")]),t._v("是对象，则返回"),s("code",[t._v("x == toPrimitive(y)")]),t._v("的结果")]),s("li",[t._v("如果"),s("code",[t._v("Type(x)")]),t._v("是对象，"),s("code",[t._v("Type(y)")]),t._v("是数字或字符串，则返回"),s("code",[t._v("toPrimitive(x) == y")]),t._v("的结果")])]),s("p",[t._v("编辑备注：")]),s("ul",[s("li",[t._v("2017-04-17第一次编辑")])])])}],!1,null,null,null);a.default=v.exports}}]);