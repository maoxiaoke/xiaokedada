(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{241:function(t,e,s){"use strict";s.r(e);var a=s(0),n=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),s("p",[t._v("Flux 是一种信息架构，或者说软件架构。而不是框架。")]),t._m(1),s("p",[t._v("MVC 是开发用户界面的一种软件架构。其中 M，V，C 的关系大概如下图所示。")]),t._m(2),s("blockquote",[s("p",[t._v("图片来自 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller",target:"_blank",rel:"noopener noreferrer"}},[t._v("wiki 百科"),s("OutboundLink")],1)])]),t._m(3),s("p",[t._v("变种也可能是这种方式：")]),t._m(4),s("blockquote",[s("p",[t._v("图片来自 "),s("a",{attrs:{href:"http://www.christianalfoni.com/articles/2015_08_02_Why-we-are-doing-MVC-and-FLUX-wrong",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why we are doing MVC and FLUX wrong"),s("OutboundLink")],1)])]),t._m(5),t._m(6),s("p",[t._v("在前端应用 MVC 是一件很让人困惑的事情。")]),t._m(7),t._m(8),s("blockquote",[s("p",[t._v("参考来源 "),s("a",{attrs:{href:"https://stackoverflow.com/questions/33447710/mvc-vs-flux-bidirectional-vs-unidirectional/33455847",target:"_blank",rel:"noopener noreferrer"}},[t._v("MVC vs. Flux ? Bidirectional vs. Unidirectional?"),s("OutboundLink")],1)])]),t._m(9),s("p",[t._v("没有一个统一的数据收口。实际情况中，更新 Model 的数据入口可以在应用的任何地方生成。")]),t._m(10),s("p",[t._v("当 View 和 Model 进行解耦后，状态的改变可能会 request 到多个 Model（和后端的处理一样，request 到多个数据库）。如果对 Model 进行抽象，Model 不是和 View 一对一对应。当项目变得很大的时候，就可能会出现这样的结果(这当然是在 MVC 设计上非常不合理的状态下)：")]),t._m(11),t._m(12),s("blockquote",[s("p",[t._v("图片来源，"),s("a",{attrs:{href:"https://www.youtube.com/watch?v=nYkdrAPrdcw",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rethinking Web App Development at Facebook"),s("OutboundLink")],1)])]),t._m(13),s("p",[t._v("MV* 架构的一个很大的优势在于，确保"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Separation_of_concerns",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("关注点分离")]),s("OutboundLink")],1),t._v("(Separation of concerns，SOC)，使得功能充分解耦。\b\b这样，在 MV* 的系统中，逻辑被认为是独立的实体，分散到组件的各个地方。")]),t._m(14),t._m(15),t._m(16),s("p",[t._v("这个问题有点难思考。就前端而言，数据的来源可能是用户输入、视图产生、AJAX 返回或者其他方式。当设计 flux 这样的一个信息架构时，对不同的数据来源应该做一个怎样的处理？")]),t._m(17),s("p",[t._v("状态管理的一个很重要的点是，状态在哪里发生变化？")]),t._m(18),s("p",[t._v("当数据之间存在相互依赖的时候，如何确保同步更新？尤其是当数据是异步更新的时候，我们无法控制何时才发生状态变化。这个时候，所能做的就只能等待异步更新发生，然后检查所有的数据依赖。")]),t._m(19),t._m(20),s("p",[t._v("数据在各组件之间以任意方向传递是很方便的，但同样会暴露两个问题：")]),t._m(21),t._m(22),t._m(23),t._m(24),s("p",[t._v("flux 的更新轮回有这么几个特点")]),t._m(25),t._m(26),t._m(27),s("p",[t._v("但发布和订阅模式的最重要的优点，同时也是最大的缺点。第一，信息中介不会传递信息的状态，无法获知消息传递是成功还是失败。另外，发布者同样也不知道订阅者的状态。最后，当订阅者数量增加时，会不会造成系统不稳定？")]),s("blockquote",[s("p",[t._v("参考来源 "),s("a",{attrs:{href:"https://abdulapopoola.com/2013/03/12/design-patterns-pub-sub-explained/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Design Patterns: PubSub Explained"),s("OutboundLink")],1)])]),s("p",[t._v("flux 在内部维持一个状态树。")]),t._m(28),s("p",[t._v("flux 使用 Store 集中修改状态，这样会导致逻辑与数据紧密耦合，这是 flux 的 Store 的一个特点。这样，不需要花费太多的精力在关注点分离，逻辑和状态变更也更为简单。")]),t._m(29),t._m(30),s("blockquote",[s("p",[t._v("图片来自 "),s("a",{attrs:{href:"https://facebook.github.io/flux/",target:"_blank",rel:"noopener noreferrer"}},[t._v("flux 官网"),s("OutboundLink")],1)])]),t._m(31),t._m(32),t._m(33),s("p",[t._v("我们可以将 action 作为给系统传递新数据的唯一途径，是系统的入口。")]),s("p",[t._v("在设计 Action 的考量有以下几点：")]),t._m(34),s("p",[t._v("相对于 MV* 架构中 Model 的数据变化很多是不太明显的(比如双向绑定的私下交易)，Flux 则要求所有的\b数据变化都需要触发一个 Action，以便于数据的追溯和应用的调试。")]),t._m(35),t._m(36),t._m(37),s("p",[t._v("Dispatcher 的职责是将 Actions 分发到 Store 中。在 flux 应用中，只有一个 Dispatcher，它是 Store 回调函数注册的地方，它将决定如何处理所有的依赖。也就是说，有了 Store 注册的回调函数，Store 就会知道哪个 Action 和它存储的状态相关。")]),s("p",[t._v("和传统的 Publish-subscribe pattern不同的地方在于：")]),t._m(38),t._m(39),s("p",[t._v("可见，Dispatcher 可以说是 flux 中最重要的功能。flux 官方的实现比较简单(下面是一个简单的调用图)：")]),t._m(40),t._m(41),t._m(42),t._m(43),s("p",[t._v("也就是说，在 flux 的官方实现中，解决依赖的方式仍然是通过排序。")]),t._m(44),s("p",[t._v("很显然，官方使用比较简单的代码就实现了一个满足要求的 Dispatcher，但是还是值得进一步思考。")]),t._m(45),s("p",[t._v("但是，在 flux 中，任何一刻都只有一个更新在轮回中发生。所以，我们只需要一个 Dispatcher 的实例。在设计模式中，这称之为 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Singleton_pattern",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("单例模式")]),s("OutboundLink")],1),t._v("。这是一种好的方式吗？这应该是值得思考的。")]),t._m(46),s("p",[t._v("如果说我们想要访问存储器更多的内容，而不仅仅是回调，这样的实现让我们似乎办不到。")]),t._m(47),t._m(48),s("p",[t._v("Store 是 flux 保存状态的地方，也是状态唯一能够被修改的地方。")]),s("p",[t._v("Store 的设计遵循以下转变。")]),t._m(49),t._m(50),s("p",[t._v("即变成：")]),t._m(51),t._m(52),s("p",[t._v("和 MV* 架构一致的地方，视图是负责渲染数据的。但用户交互（事件）的时候，MV* 架构可能会触发 Controller，也可能会直接修改 Model 里面的数据。而在 flux 中，则会触发 Action。")]),t._m(53),t._m(54),t._m(55),t._m(56),t._m(57),t._m(58),t._m(59),s("blockquote",[s("p",[s("a",{attrs:{href:"https://redux.js.org/basics/actions#action-creators",target:"_blank",rel:"noopener noreferrer"}},[t._v("Not this case in Redux"),s("OutboundLink")],1),t._v(" - 仅仅是返回 Action 的函数")])]),t._m(60),t._m(61),t._m(62),t._m(63),t._m(64),t._m(65),t._m(66),t._m(67),t._m(68),t._m(69),s("p",[t._v("对于一个中大型应用，通常比较复杂，掺杂大量功能，Store 会表现得更为复杂。我们不可能为每个功能都设计一个 Store，这完全是不合理的。")]),s("p",[t._v("在我们设计一个 Store 时，值得思考的问题有：")]),t._m(70),t._m(71),s("p",[t._v("但是在 flux 中，第三点往往是设计的难点。随着应用的构建，会包含越来越多的存储器。")]),t._m(72),t._m(73),t._m(74),t._m(75),s("p",[t._v("所以，")]),t._m(76),t._m(77),t._m(78),t._m(79),t._m(80),s("p",[t._v("虽然可以直接引用存储器，但存在弊端。一是数据的不变性问题，另一个还是 View 层无法去感知状态的改变。")]),t._m(81),t._m(82),t._m(83),s("p",[t._v("Flux 并非是万能的，对于一般的项目而言，引入 Flux 会产生大量的冗余代码。因此，在使用 Flux 前我们需要考虑以下问题：")]),t._m(84),s("p",[t._v("如果都是否定，也许最基本的框架就可以解决问题。")]),t._m(85),s("ol",[s("li",[s("p",[s("a",{attrs:{href:"http://fluxxor.com/what-is-flux.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fluxxor"),s("OutboundLink")],1),t._v(" - Fluxxor 是一个纯粹的 flux 库")])]),s("li",[s("p",[s("a",{attrs:{href:"https://medium.com/swlh/the-case-for-flux-379b7d1982c6",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Case for Flux"),s("OutboundLink")],1)])]),s("li",[s("p",[s("a",{attrs:{href:"https://stackoverflow.com/questions/35924036/why-do-we-need-flux-with-react",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why do we need Flux with React?"),s("OutboundLink")],1),t._v(" - Stack Overflow 问答")])]),s("li",[s("p",[s("a",{attrs:{href:"http://voidcanvas.com/flux-vs-mvc/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MVC vs Flux – which one is better?"),s("OutboundLink")],1),t._v(" - 一篇批评 flux 的理性文章")])]),s("li",[s("p",[s("a",{attrs:{href:"https://blog.isquaredsoftware.com/2016/10/idiomatic-redux-why-use-action-creators/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Idiomatic Redux: Why use action creators?"),s("OutboundLink")],1)])]),s("li",[s("p",[s("a",{attrs:{href:"http://www.christianalfoni.com/articles/2015_08_02_Why-we-are-doing-MVC-and-FLUX-wrong",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why we are doing MVC and FLUX wrong\n"),s("OutboundLink")],1)])]),s("li",[s("p",[s("a",{attrs:{href:"https://medium.com/@dan_abramov/the-evolution-of-flux-frameworks-6c16ad26bb31",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Evolution of Flux Frameworks"),s("OutboundLink")],1)])]),s("li",[s("p",[s("a",{attrs:{href:"https://medium.com/swlh/the-case-for-flux-379b7d1982c6",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Case for Flux"),s("OutboundLink")],1),t._v(" - 一篇描述 flux 应用场景的一篇文章")])])]),t._m(86),t._m(87),t._m(88),t._m(89)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"flux-学习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flux-学习","aria-hidden":"true"}},[this._v("#")]),this._v(" Flux 学习")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"mvc-or-mv"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvc-or-mv","aria-hidden":"true"}},[this._v("#")]),this._v(" MVC or MV*")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://p3puylt4n.bkt.clouddn.com/500px-MVC-Process.svg.png",alt:"MVC"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("实际上很明显，在真正的 MVC 架构中（或者说传统的，只是我不太像把话说得太死），数据的流向是"),s("strong",[t._v("单向的")]),t._v("(unidirectional) 的。后端的实施大概是这样，服务端接收数据，通过 "),s("code",[t._v("Controller")]),t._v(" 进行逻辑处理，对 "),s("code",[t._v("Model")]),t._v(" 中的数据进行修改，最终更新 "),s("code",[t._v("View")]),t._v(" 层。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://p3puylt4n.bkt.clouddn.com/mvc-backend.jpg",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("View")]),this._v(" 层并不和 "),e("code",[this._v("Model")]),this._v(" 直接交互，而是会再经过 "),e("code",[this._v("Controller")]),this._v(" 进行一次数据组装。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"前端的-mvc-的思考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端的-mvc-的思考","aria-hidden":"true"}},[this._v("#")]),this._v(" 前端的 MVC 的思考")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("第一点，无法保证 MVC 是一个单向的数据流结构。源于多种原因，比如：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("诸如 Vue、Angular 的 MV* 框架绑定 "),e("code",[this._v("onchange()")]),this._v(" 事件来更新 Model")]),e("li",[this._v("MV* 框架会通过 Model 中的数据来更新 View")]),e("li",[this._v("可以通过 "),e("code",[this._v("AJAX")]),this._v(" 返回新的 Model 数据")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"2"}},[e("li",[this._v("不只有一个数据入口。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"3"}},[e("li",[this._v("没有单个 State Store 的概念。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("这里说的 state，称为 状态。跟 Model data 并不是等价的。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://p3puylt4n.bkt.clouddn.com/MVC_02.PNG",alt:"When scale"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"mv-的一个很大的优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mv-的一个很大的优势","aria-hidden":"true"}},[this._v("#")]),this._v(" MV* 的一个很大的优势")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"当我们在讨论-flux-的时候，我们在说什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#当我们在讨论-flux-的时候，我们在说什么","aria-hidden":"true"}},[this._v("#")]),this._v(" 当我们在讨论 flux 的时候，我们在说什么")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("flux 比较关注的一点是，"),e("code",[this._v("data")]),this._v("。flux 将数据（信息）作为首要的设计考量。因此，我们可能需要考虑几个问题：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("数据的入口在哪里")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"2"}},[e("li",[this._v("状态管理")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"3"}},[e("li",[this._v("同步更新")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"flux-提供的解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flux-提供的解决方案","aria-hidden":"true"}},[this._v("#")]),this._v(" flux 提供的解决方案")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"单向数据流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单向数据流","aria-hidden":"true"}},[this._v("#")]),this._v(" 单向数据流")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("花费更多的时间去同步，也就是说，如果数据不按照一致的方向流动，就可能出错(尤其是大型应用，存在大量状态的竞态时)")])]),e("li",[e("p",[this._v("缺乏数据的可预测性。单向数据流能够提供状态的可追溯、可回溯。这种可预见的好处并不仅限于：")]),e("ol",[e("li",[this._v("调试")]),e("li",[this._v("自动化测试")]),e("li",[this._v("更关注于功能实现")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("TIP")]),e("p",[this._v("当数据流单向地从系统进入组件时，就很容易预测和跟踪所有可能产生的影响，这种设计是很重要的，而且不只是局限于调试。这样，更多的时间可以花在构建应用的功能上。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"更新轮回-update-round"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新轮回-update-round","aria-hidden":"true"}},[this._v("#")]),this._v(" 更新轮回 - update Round")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://p3puylt4n.bkt.clouddn.com/flux-update-loop.png",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("在一个更新轮回中，只有一个 "),e("code",[this._v("action")]),this._v(" 在进行分发")]),e("li",[this._v("同时，我们还要保证，在一个更新轮回中没有其他任何异步行为可以打断它")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"维持一个内部状态树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#维持一个内部状态树","aria-hidden":"true"}},[this._v("#")]),this._v(" 维持一个内部状态树")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("发布和订阅模式(Publish-subscribe pattern) 是组件间通信的中比较流行的一种机制。举个例子: Vue 的 "),e("code",[this._v("$on")]),this._v(" 和 "),e("code",[this._v("$emit")]),this._v(" 就是这样的一种方式。这种方式一定程度上进行了 "),e("em",[this._v("松耦合")]),this._v("，发布者和订阅者之间能够相互独立地运行。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"逻辑和状态紧密耦合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#逻辑和状态紧密耦合","aria-hidden":"true"}},[this._v("#")]),this._v(" 逻辑和状态紧密耦合")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"flux-的结构图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flux-的结构图","aria-hidden":"true"}},[this._v("#")]),this._v(" flux 的结构图")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://p3puylt4n.bkt.clouddn.com/flux-ar.png",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"action-数据入口，描述具体要发生什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#action-数据入口，描述具体要发生什么","aria-hidden":"true"}},[this._v("#")]),this._v(" Action - 数据入口，描述具体要发生什么")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("官网是这样定义的："),e("em",[this._v("The actions are simple objects containing the new data and an identifying type property.")]),this._v(" - actions 是包含新数据（负载）和标识类型属性的简单对象。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),s("p",[t._v("标准的 action 有两个要求，其一：")]),s("ul",[s("li",[t._v("必须是一个 "),s("strong",[t._v("简单对象")])]),s("li",[t._v("必须有一个 "),s("code",[t._v("type")]),t._v(" 属性")])]),s("p",[t._v("比如：")]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'ADD_SOMETHING'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  payload"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    text"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'Do something'")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("https://github.com/redux-utilities/flux-standard-action")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("显式优于隐式")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"2"}},[e("li",[e("p",[this._v("所有的状态改变都由 Action 产生")])]),e("li",[e("p",[this._v("数据的一致性")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Action 设计的另一点考虑是"),e("em",[this._v("数据的一致性")]),this._v("。所有提交到 Store 的数据尽量都遵循统一的格式定义。既能剔除多余数据对 Store 设计的干扰，亦能使得数据的处理清晰明朗。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"dispatcher"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dispatcher","aria-hidden":"true"}},[this._v("#")]),this._v(" Dispatcher")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("每个回调并不是和特定的事件相对应（即，单个回调可以处理多个事件）。但是，负载（PayLoad）分发到每个注册的回调。")]),e("li",[this._v("回调可以全部或部分延迟运行，直到所依赖的回调被执行完。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("所谓负载(PayLoad)，就是传递给回调函数的 "),e("em",[this._v("参数")]),this._v("。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://p3puylt4n.bkt.clouddn.com/flux-dispatcher.png",alt:"flux-dispatcher"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("https://github.com/facebook/flux/blob/master/src/Dispatcher.js")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在这里我们肯定希望得到解答，Dispatcher 是如何解决 "),e("em",[this._v("同步更新")]),this._v(" 的问题，如何进行依赖关系的处理。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://p3puylt4n.bkt.clouddn.com/flux-waitFor.jpg",alt:"flux-waitFor"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"思考官方实现的-dispatcher"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#思考官方实现的-dispatcher","aria-hidden":"true"}},[this._v("#")]),this._v(" 思考官方实现的 Dispatcher")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("官方使用 class 来实现 Dispatcher。当我们使用官方提供的 Dispatcher 时，需要去实例化。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"2"}},[e("li",[this._v("官方实现 register 的时候，传递的是回调函数，而非存储器的引用。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),e("p",[this._v("Dispatcher 是数据依赖的最终仲裁者")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"store"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#store","aria-hidden":"true"}},[this._v("#")]),this._v(" Store")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token function"}},[t._v("f")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("actions"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" newState\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("对于一个给定的状态，由 Actions 触发的 mutation 是确定的")]),e("li",[this._v("如果看成是一个 reducer，Store 就是 accumlators。")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token function"}},[t._v("f")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("actions"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" middleware "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" newState\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"view"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#view","aria-hidden":"true"}},[this._v("#")]),this._v(" View")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这样的目的，保障 flux 的单一入口。也就是说，通过 "),e("code",[this._v("AJAX")]),this._v(" 获取数据来更新状态和用户点击按钮所触发的行为是一致的，对 flux 而言，两者没有区别。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"usage-pattern"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-pattern","aria-hidden":"true"}},[this._v("#")]),this._v(" Usage Pattern")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"action-creator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#action-creator","aria-hidden":"true"}},[this._v("#")]),this._v(" Action Creator")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在实际的项目中，我们不太可能直接将 "),e("code",[this._v("Action")]),this._v(" 和我们的业务代码杂糅起来，而更适合用 "),e("em",[this._v("模块化")]),this._v(" 的解决方案。总结来说，使用 "),e("code",[this._v("ActionCreator")]),this._v(" 有以下优点：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("模拟数据 - "),e("code",[this._v("ActionCreator")]),this._v(" 可以让我们在真实数据和模拟数据之间切换自如。")]),e("li",[this._v("基本的抽象")]),e("li",[this._v("关注点分离")]),e("li",[this._v("封装和一致性")]),e("li",[this._v("可测试和灵活性")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("ActionCreator")]),this._v(" 也很简单。即，通过依赖注入 Dispatcher 对 "),e("code",[this._v("Action")]),this._v(" 进行的包装。例如：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// './action/load-tasks'")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" dispatcher "),s("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'../dispatcher'")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// export Action type")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("LOAD_TASKS")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'LOAD_TASKS'")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// dispatching an action using mock data")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("loadTasks")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  dispatcher"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("dispatch")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("LOAD_TASKS")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    payload"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        id"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        name"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'xiaoke'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        state"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'running'")]),t._v("\n      "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"asynchronous-actions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#asynchronous-actions","aria-hidden":"true"}},[this._v("#")]),this._v(" Asynchronous Actions")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("笼统来讲，我们可以将 "),s("code",[t._v("Action")]),t._v(" 分为 View 和 API调用 产生两类。"),s("code",[t._v("View")]),t._v(" 一般会触发一些同步 "),s("code",[t._v("Action")]),t._v("(并不是绝对的)，"),s("code",[t._v("API")]),t._v(" 会触发一些异步 "),s("code",[t._v("Action")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在我们整个 flux 的设计理念中，都非常强调 "),e("em",[this._v("同步")]),this._v(" 的概念 - 即，在一个更新的轮回中，所有涉及的操作都是同步的。为什么需要同步，因为任何异步都是导致应用数据产生 "),e("code",[this._v("mutation")]),this._v(" 的根源。那么，剩下最后一个需要解答的问题是：同步会不会使得我们从新回来远古时代？显然不会，因为这种同步，只是 flux 数据流的同步，而不是整个应用。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("所以，对于异步 "),e("code",[this._v("ActionCreator")]),this._v(" 的设计，就需要满足一点：在 "),e("code",[this._v("Action")]),this._v(" 被分发前，一定需要等到某种响应。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// './action/load-tasks'")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" dispatcher "),s("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'../dispatcher'")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// export Action type")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("LOAD_TASKS")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'LOAD_TASKS'")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// 模拟异步请求")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" api "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Promise")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolve"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolve"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1000")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\napi"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("then")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  dispatcher"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("dispatch")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("LOAD_TASKS")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    tasks"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" res\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("更深入一点，我们还可以继续探讨 View 产生的和 异步请求 产生 "),s("code",[t._v("Action")]),t._v(" 时，"),s("code",[t._v("ActionCreator")]),t._v(" 如何设计；当需要组织异步请求时，"),s("code",[t._v("ActionCreator")]),t._v(" 如何设计；需要处理 "),s("code",[t._v("error")]),t._v(" 时，"),s("code",[t._v("ActionCreator")]),t._v(" 如何设计；等等。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"对异步-actioncreator-的最后一个问题，应该在-actioncreator-中处理返回数据吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对异步-actioncreator-的最后一个问题，应该在-actioncreator-中处理返回数据吗","aria-hidden":"true"}},[this._v("#")]),this._v(" 对异步 ActionCreator 的最后一个问题，应该在 ActionCreator 中处理返回数据吗")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在 flux 的设计中，我们更强调的是 "),e("code",[this._v("Store")]),this._v(" 中来处理数据，而不是 "),e("code",[this._v("ActionCreator")]),this._v("。所以，我们应该去保留这种统一性，有两点：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("更好地跟踪状态变化")]),e("li",[this._v("可能有利于抽象化 "),e("code",[this._v("Action")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"优良的-store-设计是-flux-的基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优良的-store-设计是-flux-的基础","aria-hidden":"true"}},[this._v("#")]),this._v(" 优良的 Store 设计是 flux 的基础")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Store 是否映射到应用中的一个上层功能？")]),e("li",[this._v("Store 是否忽略了不需要使用的 API 数据")]),e("li",[this._v("是否包含了太多 Store")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"如何解决太多的-store"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何解决太多的-store","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何解决太多的 Store")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我们能够想到的解决方案之一是，是不是可以增加"),e("strong",[this._v("通用型")]),this._v("存储器。增加通用型存储器的一个缺陷是会增加更多的依赖管理，然而处理依赖并非一件很简单的事。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("另外一个解决方案是，将所有的 "),s("code",[t._v("State")]),t._v(" 放在一个 "),s("code",[t._v("Store")]),t._v(" 里面。这样的缺陷是，单个 "),s("code",[t._v("Store")]),t._v(" 的复杂度太高，将它重构成多个 "),s("code",[t._v("Store")]),t._v(" 是有必要的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"immutable-store"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#immutable-store","aria-hidden":"true"}},[this._v("#")]),this._v(" Immutable Store")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在整个 flux 的设计中，都非常强调只有 Actions 才能改变 Store 里的状态。对于一些 "),e("em",[this._v("非 Immutable 操作")]),this._v(" 会导致 Store 里的状态变化变得非常隐蔽。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ol",[s("li",[t._v("谨慎使用一些非 Immutable 操作，比如 "),s("code",[t._v("...")]),t._v("、"),s("code",[t._v("Object.assign()")]),t._v("、"),s("code",[t._v("Array.prototype.find()")]),t._v(" 等。")]),s("li",[t._v("使用 "),s("code",[t._v("ImmutableJS")]),t._v(" 等库。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"和-view-层交互"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#和-view-层交互","aria-hidden":"true"}},[this._v("#")]),this._v(" 和 View 层交互")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("和 View 层交互的第一个方面，是触发 "),e("code",[this._v("Store")]),this._v(" 中的数据改变。这一点我们可以通过分发 "),e("code",[this._v("Actions")]),this._v(" 来解决。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("另一个方面，是从 "),e("code",[this._v("Store")]),this._v(" 中取得状态数据。这当然有很多种方式：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("直接引用存储器")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"2"}},[e("li",[this._v("使用 EventEmitter")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("官方包装了 Node 的 "),e("code",[this._v("EventEmitter")]),this._v(" 的模块叫 "),e("code",[this._v("fbemitter")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"flux-的使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flux-的使用场景","aria-hidden":"true"}},[this._v("#")]),this._v(" Flux 的使用场景")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("你的状态有很多来源吗")]),e("li",[this._v("你的应用有大量的级联更新吗")]),e("li",[this._v("你的应用有很多复杂的状态更改吗")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"更多参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更多参考","aria-hidden":"true"}},[this._v("#")]),this._v(" 更多参考")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"问题的思考逻辑"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题的思考逻辑","aria-hidden":"true"}},[this._v("#")]),this._v(" 问题的思考逻辑")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("是什么？")]),e("li",[this._v("为什么？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("熟悉的场景(situation)")]),e("li",[this._v("场景的冲突点(complict)")]),e("li",[this._v("问题所在(Question)")]),e("li",[this._v("解决方案(Method)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"3"}},[e("li",[this._v("不这样行不行？")]),e("li",[this._v("有什么可拓展的")])])}],!1,null,null,null);e.default=n.exports}}]);