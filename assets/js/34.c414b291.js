(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{185:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._m(1),a("p",[t._v("在编程领域中，函数的作用举足轻重。"),a("a",{attrs:{href:"http://blog.fogus.me/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Michael Fogus"),a("OutboundLink")],1),t._v(" 在 "),a("a",{attrs:{href:"https://www.amazon.com/Functional-JavaScript-Introducing-Programming-Underscore-js/dp/1449360726/?tag=fogus-20",target:"_blank",rel:"noopener noreferrer"}},[t._v("Functional JavaScript"),a("OutboundLink")],1),t._v(" 描述了函数在 FP 领域的两个重要性：")]),t._m(2),t._m(3),t._m(4),t._m(5),a("p",[t._v("抽象在软件世界无处不在。在 JavaScript 中，主要体现在以下结构中：")]),t._m(6),t._m(7),t._m(8),t._m(9),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),t._m(15),t._m(16),a("p",[t._v("由于函数是 “一等公民”，因此可以将函数作为参数传递、或者作为函数返回值返回。如此，一个函数可以称为 “高阶函数”（First-Order Function），则需满足：")]),t._m(17),t._m(18),t._m(19),t._m(20),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26),a("p",[t._v("这就是我所强调的，在 FP 领域中需要将编程的思维从值转换为函数，函数才是我们操纵的对象。值只是像水流一样在函数中变换、传递。只要能有一个达到目的的函数，程序的最终输出也就可预测了。")]),a("p",[t._v("在 FP 编程领域，只有在 “函数构成的软件大厦” 完成之后，才会关心值；而在那之前，我们的重点都应该放在函数身上，因为函数才应该是软件行为的最小单元。之后会提到 pointfree、柯里化等概念，都会试图将我们从目光从值转移到函数身上来。")]),t._m(27),t._m(28),a("p",[t._v("返回一个常数的函数是常见的，也是非常有用的，几乎成了函数式编程的一种模式。")]),t._m(29),t._m(30),t._m(31),t._m(32),t._m(33),t._m(34),a("p",[t._v("在编程的真实中，函数内部会处理一些行为操作，或执行一系列步骤，或转换 IO 数据。")]),t._m(35),a("p",[t._v("集合间的关系可以描述为：")]),a("p",{staticStyle:{"text-align":"center"}},[t._v("𝑓 : A → B")]),t._m(36),a("p",[t._v("举例： 𝑓(x) = 2x (x ∈ R)，则表示实数集到实数集的一个映射关系。即对于实数集的任意元素 x，存在函数关系 𝑓 将其映射到另一实数集的元素。")]),a("p",[t._v("我们可以观察到以下特征：")]),t._m(37),t._m(38),a("p",[t._v("纯函数（Pure Function）和代数学中的函数行为一致。纯函数有以下 “优良品质”：")]),t._m(39),t._m(40),a("p",[t._v("来看一个有副作用的函数例子，计算一个平面圆的面积：")]),t._m(41),t._m(42),a("p",[t._v("将上面的例子改写成 “纯” 一点的函数：")]),t._m(43),t._m(44),t._m(45),t._m(46),a("p",[t._v("由于 “纯” 函数式 “无副作用” 的，它的执行结果就是返回值，影响返回值的唯一因素就是函数参数。对于单元测试的程序员来说，这简直就是福音呀：在测试函数的时候，只需关心参数的一些边界值就行，也不必关系函数的调用顺序，不用费心设置函数依赖的一些外部值。")]),t._m(47),a("p",[t._v("并行遇到函数式编程，就像 “鱼儿遇见水”。并行编程是函数式编程发挥其最大实力的领域。因为在函数式编程中，所有的函数都是纯函数，不需要访问共享的内存，也不会因为副作用而进入竞争态(Race Condition)。")]),t._m(48),a("p",[t._v("如果在一个函数依赖众多的外部变量，我相信这个函数会像 “shit” 一样让你不想去碰它。但纯函数不一样，由于它只依赖传给它的函数参数，你会更加大胆、有自信地重构或重新组织它内部的代码。")]),t._m(49),t._m(50),a("p",[t._v("[1] Guttag, John V. (18 January 2013). Introduction to Computation and Programming Using Python (Spring 2013 ed.). Cambridge, Massachusetts: The MIT Press. ISBN 9780262519632.")]),t._m(51),a("p",[t._v("在函数式编程中，函数是第一要义。从命令式到声明式的跨越，意味着从告诉电脑 「How To Do」到「What I Want」的转变。而这一秘诀，是因为 “函数” 抽象了行为，因此我们可以不去了解其内部到底做了什么，只需要知道其为我们提供了什么能力，并且保证自己是 “纯” 的。")]),t._m(52),t._m(53),a("p",[t._v("是的，函数复用。相比于重新创建一个匿名的 "),a("code",[t._v("number => 2 + number")]),t._v(" 函数，我们的函数版本复用了 "),a("code",[t._v("calcTwo")]),t._v(" 这个函数。此外，在"),a("router-link",{attrs:{to:"./Light-FP-Compose.html"}},[t._v("函数组合")]),t._v("中，函数版本的 "),a("code",[t._v("add")]),t._v(" 比 "),a("code",[t._v("+")]),t._v(" 有更大的优势。")],1),a("p",[t._v("在上面的例子中，我们用到了进行了"),a("router-link",{attrs:{to:"./Light-FP-Currying.html"}},[t._v("柯里化")]),t._v("版本的 "),a("code",[t._v("map")]),t._v(" 函数，不过介绍柯里化并不是这一节的重点，我们会在后面提到它。")],1),t._m(54),t._m(55),t._m(56),t._m(57),t._m(58),t._m(59),t._m(60),t._m(61),a("p",[t._v("举例，若在某国可以驾驶的年龄段的是 [18, 60)，那么他的年龄必须大于或等于 18，小于 60。")]),t._m(62),t._m(63),t._m(64),t._m(65),t._m(66),t._m(67),t._m(68),t._m(69),t._m(70),t._m(71),t._m(72),t._m(73),t._m(74),t._m(75),t._m(76),t._m(77),a("p",[t._v("在 "),a("router-link",{attrs:{to:"./Light-FP-Categries.html"}},[t._v("范畴学基础理论")]),t._v(" 一节中提到过"),a("a",{attrs:{href:""}},[t._v("单位函数")]),t._v(" 这一概念。这是一个极为重要的概念，我们在 "),a("router-link",{attrs:{to:"./Light-FP-Compose.html"}},[t._v("函数组合")]),t._v(" 中也会再次介绍它。它的实现也非常简单：")],1),t._m(78),t._m(79),t._m(80),t._m(81),t._m(82),a("p",[t._v("到此，想必很多同学对于上面的例子感到无所适从。是的，处于提供最完整的函数式的例子，在这里我引入了很多其他的内容。")]),a("p",[t._v("比如我介绍:")]),t._m(83),a("p",[t._v("我用了「可以」这个词，是因为在 Ramda 中，函数都是柯里化的。而对于柯里化的概念，会在 "),a("router-link",{attrs:{to:"./Light-FP-Currying-And-Patial-Complicative.html"}},[t._v("Currying 和 Partial Complicative")]),t._v(" 介绍；placeholder "),a("code",[t._v("__")]),t._v(" 也会在柯里化一节介绍；"),a("code",[t._v("pipe")]),t._v(" 的概念，会在 "),a("router-link",{attrs:{to:"./Light-FP-Compose.html"}},[t._v("函数组合")]),t._v(" 介绍；同时细心的你可能发现，我们举出的例子只有在真正需要它的时候才会将数据传入，这便是 point-free 和 data-last style，你同样可以在后面的章节发现这些概念的踪影。")],1),a("p",[t._v("你不必先去学习这些概念，因为在这里，我想强调的是在函数式编程的世界中，“函数贯穿始终”。相比于命令式编程，函数式编程更习惯将行为抽象出来。于是围绕着函数，我们又引入了高阶函数、纯函数等概念。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"函数基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数基础","aria-hidden":"true"}},[this._v("#")]),this._v(" 函数基础")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"抽象-和-组合-abstration-composition"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象-和-组合-abstration-composition","aria-hidden":"true"}},[this._v("#")]),this._v(" 抽象 和 组合 (Abstration & Composition)")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[this._v("以函数为抽象单元 (抽象)")]),s("li",[this._v("以函数为行为单元 (组合)")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在介绍章节 "),s("a",{attrs:{href:""}},[this._v("理解编程")]),this._v(" 中其实谈到由于我们大脑的缺陷，在处理问题时，会逻辑性地将信息进行结构化地分解并重新组合。也就是分解成小问题，再组合起来解决大问题。而我们将实现细节分解到小问题的这种行为，便是一种 "),s("strong",[this._v("抽象行为")]),this._v("(Abstration Behavior)。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("The essence of abstractions is preserving information that is relevant in a given context, and forgetting information that is irrelevant in that context. -- John V. Guttag")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("抽象行为")]),this._v(" 是通过忽略某一问题具体实现细节，归纳这一类问题的共同特征或属性的过程。"),s("del",[this._v("Generalization，一般化")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("算法")]),s("li",[this._v("数据结构")]),s("li",[this._v("模块")]),s("li",[this._v("类")]),s("li",[this._v("函数")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("del",[this._v("函数是实现抽象的一个方式："),s("strong",[this._v("隐藏了实现细节")]),this._v("。这似乎是函数固有的一种属性（天然的本份），毋庸置疑。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("有了函数之后，函数与函数之间的调用可以构建起整个软件工程。从某个角度来说，"),s("strong",[this._v("函数并不特殊")]),this._v("，如果可以像对待其他数据类型一样对待函数 —  当做参数传递，当做函数返回值返回，又或者赋值给其他变量… ，这样才能发挥函数作为行为单元的真正威力。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("del",[this._v("如果一个函数可以当做参数传递、又或者作为返回值返回，就称为 “高阶函数”（Higher-Order Function）")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"一等公民身份"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一等公民身份","aria-hidden":"true"}},[this._v("#")]),this._v(" 一等公民身份")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("高阶函数是建立在函数是 “一等公民”（First-Class）的基础之上的。“一等公民” 的含义是："),s("strong",[this._v("和其他数据类型没啥不同")]),this._v("。函数的 “一等公民” 身份是重要的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("比如，为了能让函数得到 "),s("em",[this._v("延迟")]),this._v(" 执行，人们往往会这样写：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sayHi "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("string")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Say Hi, ")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 为延迟执行 sayHi")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" wrappedSayHi "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("string")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("sayHi")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("仅仅是为了能够延迟执行函数，就用函数 "),s("code",[this._v("wrappedSayHi")]),this._v("   把 "),s("code",[this._v("sayHi")]),this._v(" 包裹起来，这是多么愚蠢的写法。如果函数是 “一等公民”，下面这样写就足够了：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sayHi "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("string")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Say Hi, ")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 这样才算好的")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" wrappedSayHi "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" sayHi\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"高阶函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 高阶函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[this._v("是 “一等公民”")]),s("li",[this._v("以函数作为参数")]),s("li",[this._v("或者返回函数")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("我们应该从函数的 “一等公民” 的角度来理解高阶函数，即相对于 First-Order 函数 - 无法接收函数作为参数，也无法返回函数，亦不能将函数赋值给变量。从 “阶” 的角度来理解的高阶函数是片面的，比如将 "),s("code",[this._v("Foo(1)(2)")]),this._v(" 才理解为高阶函数。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"以函数作为参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#以函数作为参数","aria-hidden":"true"}},[this._v("#")]),this._v(" 以函数作为参数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先，先实现一个 "),s("code",[this._v("repeat")]),this._v(" 函数，接受一个数字和一个值。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" repeat"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token constant"}},[t._v("T")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("times"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("number")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("T")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("T")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("...")]),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("times"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("map")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("repeat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'oops'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('// ["oops", "oops", "oops", "oops"]')]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("函数使用 "),a("code",[t._v("Array.prototype.map")]),t._v("函数将 "),a("code",[t._v("value")]),t._v(" 重复了 "),a("code",[t._v("times")]),t._v(" 次。说实话，上述"),a("code",[t._v("repeat")]),t._v(" 函数的实现 "),a("em",[t._v("并没有")]),t._v(" 很大的可取之处。实际上，"),a("strong",[t._v("抽象度")]),t._v(" 太低。稍微改动一下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("repeat")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("times"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("number")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fun"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("T")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("T")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("...")]),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("times"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("map")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fun"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("repeat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'oops'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('// ["oops", "oops", "oops", "oops"]')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在这个版本中，"),s("code",[this._v("repeat")]),this._v(" 函数接收一个函数，随之华丽变身 “高阶函数”。在有些人看来，这多此一举，接下来我会试着解释一下。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"使用函数，而不是值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用函数，而不是值","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用函数，而不是值")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("还记得编程的要义吗？—— 以函数为行为单元。在  "),s("code",[this._v("repeat")]),this._v(" 的这个例子中，宁愿让函数  "),s("code",[this._v("() =>'oops'")]),this._v(" 重复多次，也不应该让值重复多次。"),s("del",[this._v("为什么如此说呢？因为改变一个值比改变一个函数要容易得多。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("del",[this._v("我们并不需要关心值，函数才是操纵的最小单位元。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"以函数作为返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#以函数作为返回值","aria-hidden":"true"}},[this._v("#")]),this._v(" 以函数作为返回值")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" always"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token constant"}},[t._v("T")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("T")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("T")]),t._v("  "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" value\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面这个例子中，"),s("code",[this._v("always")]),this._v(" 返回一个函数，进而使自己成为 “高阶函数”。用此函数替换"),s("code",[this._v("()=>'oops'")]),this._v(" 会简洁一些：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("repeat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("always")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'oops'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包","aria-hidden":"true"}},[this._v("#")]),this._v(" 闭包")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"纯函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#纯函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 纯函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"代数中的函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代数中的函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 代数中的函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不过首先，让我们考虑一下代数中函数的行为。按照 G. Cantor 的想法，由一些确定的且相互区别的对象(Object)汇集而组成的一个整体，称为集合。组成该集合的对象称为它的元素，描述为 "),s("code",[this._v("𝑎 ∈ A")]),this._v("，其中 "),s("code",[this._v("𝑎")]),this._v(" 是集合 "),s("code",[this._v("A")]),this._v(" 中的元素。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("𝑓")]),this._v(" 表示集合 A 到集合 B 的函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[this._v("函数是输入 x 到输出 𝑓(x) 的一个 mapping 关系。")]),s("li",[this._v("对于任意一个输入 x, 可以完全用输出 𝑓(x) 完全替代，这称为 Referential Transparency。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"纯函数的-mapping-关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#纯函数的-mapping-关系","aria-hidden":"true"}},[this._v("#")]),this._v(" 纯函数的 Mapping 关系")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[this._v("函数结果 "),s("strong",[this._v("只")]),this._v(" 依赖函数参数")]),s("li",[s("strong",[this._v("无法")]),this._v(" 改变外部世界状态")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("换句话说，"),a("strong",[t._v("相同的输入，永远得到相同的结果")]),t._v("，这是纯函数 "),a("strong",[t._v("幂等性")]),t._v("（Idempotence）；第二句话的意思是说，纯函数没有可观察到的 "),a("strong",[t._v("副作用")]),t._v("。"),a("strong",[t._v("幂等性")]),t._v(" 和 "),a("strong",[t._v("无副作用")]),t._v("，这是纯函数的核心价值点。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[t._v("window"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("PI")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3.14")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" areaOfCircle "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("radius"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("number")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("PI")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("sqrt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("radius"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nwindow"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("PI")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("100")]),t._v("\n"),a("span",{attrs:{class:"token builtin"}},[t._v("console")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("areaOfCircle")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// Whoops")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 2,500")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("将一个变量挂载到 "),a("code",[t._v("window")]),t._v(" 上这是很多库常见的做法，但是这些值很容易被更改。当这些值被 “秘密地” 被更改后，你会发现这是一件多么让人恼火的事，因为函数的结果取决于 "),a("em",[t._v("系统状态")]),t._v("（System State）。因此，一方面我们不愿意值被秘密地被更改，希望操作之后值还是 “原来的值”，这就是数据的 "),a("em",[t._v("不可变性")]),t._v("（Immutable）；另一方面，我们希望函数不依赖函数外部的可变量，仅仅通过函数参数来预测函数行为，这一点，也称为 "),a("em",[t._v("引用透明性")]),t._v("（Referential Transparency）—— 实际上，我更愿意用 “依赖透明性” 这个词。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("areaOfCircle")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("radius"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("number")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("PI")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3.14")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("PI")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("sqrt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("radius"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个例子足够简单，“不纯” 相比 “纯” 危害似乎没有很严重。但是我必须在此申明，"),s("strong",[this._v("这种依赖状态是影响系统复杂度的祸首")]),this._v("。接下来，会告诉你 FP 追求 “纯” 函数是值得的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"为何追求-“纯”"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为何追求-“纯”","aria-hidden":"true"}},[this._v("#")]),this._v(" 为何追求 “纯”")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"可测试性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可测试性","aria-hidden":"true"}},[this._v("#")]),this._v(" 可测试性")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"并行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并行","aria-hidden":"true"}},[this._v("#")]),this._v(" 并行")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"易于重构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#易于重构","aria-hidden":"true"}},[this._v("#")]),this._v(" 易于重构")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("另一个减轻重构难度的优势在于纯函数的 "),s("em",[this._v("引用透明性")]),this._v("，只要保证相同的输入输出，就可以完全用另一个想等的函数或函数结果替换它，而不改变整个的程序的行为。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reference","aria-hidden":"true"}},[this._v("#")]),this._v(" Reference")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"ramda-和-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ramda-和-函数","aria-hidden":"true"}},[this._v("#")]),this._v(" Ramda 和 函数")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("举例来说，算术运算。在函数式编程的世界中，一般不会直接去操纵 "),a("code",[t._v("+")]),t._v("、"),a("code",[t._v("-")]),t._v("、"),a("code",[t._v("*")]),t._v(" 和 "),a("code",[t._v("/")]),t._v(" 这四个算术符号，是因为直接操纵太过死板了。在 Ramda 中，有 "),a("code",[t._v("add")]),t._v("、"),a("code",[t._v("subtract")]),t._v("、"),a("code",[t._v("multiply")]),t._v(" 和 "),a("code",[t._v("divide")]),t._v(" 相对应的函数提供调用。比较下面的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" evenNumber "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("6")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" oddNumber "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("map")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("number")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("evenNumber"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("map")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("number")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oddNumber"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" calcTwo "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("add")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("map")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("calcTwo"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("evenNumber"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("map")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("calcTwo"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oddNumber"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("总而言之，请记住这句话："),s("strong",[this._v("函数贯穿始终")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"算术-math"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算术-math","aria-hidden":"true"}},[this._v("#")]),this._v(" 算术 (Math)")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ol",[a("li",[a("code",[t._v("add")]),t._v(" 对应于 "),a("code",[t._v("+")]),t._v(" 运算")]),a("li",[a("code",[t._v("subtract")]),t._v(" 对应于 "),a("code",[t._v("-")]),t._v(" 运算")]),a("li",[a("code",[t._v("multiply")]),t._v(" 对应于 "),a("code",[t._v("*")]),t._v(" 运算")]),a("li",[a("code",[t._v("divide")]),t._v(" 对应于 "),a("code",[t._v("/")]),t._v(" 运算")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("此外，Ramda 还提供取模运算 "),a("code",[t._v("mathMod")]),t._v("、平均数 "),a("code",[t._v("meanMath")]),t._v("、取负 "),a("code",[t._v("meanMath")]),t._v(" 等辅助函数。简单地，我们来做一个 "),a("code",[t._v("(2 * 3 + 1)^2")]),t._v(" 简单算术。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("square")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" x\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" doArithmetic "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("compose")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  square"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("add")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  multiply\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("doArithmetic")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ol",{attrs:{start:"5"}},[a("li",[t._v("由于 "),a("code",[t._v("add(1)")]),t._v(" 和 "),a("code",[t._v("subtract(1)")]),t._v(" 是一个常见的操作，因此 Ramda 提供了 "),a("code",[t._v("inc")]),t._v(" 和 "),a("code",[t._v("dec")]),t._v(" 函数与其对应。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"逻辑-logic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑-logic","aria-hidden":"true"}},[this._v("#")]),this._v(" 逻辑 (Logic)")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ol",[a("li",[a("code",[t._v("both")]),t._v(" 和 "),a("code",[t._v("either")]),t._v(" 可以接收两个函数作为参数，替代运算符 "),a("code",[t._v("&&")]),t._v(" 和 "),a("code",[t._v("||")])]),a("li",[a("code",[t._v("complement")]),t._v(" 可以接收一个函数作为参数，替代运算符 "),a("code",[t._v("!")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isOver18 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("gte")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("18")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isOldEnough "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("lt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("60")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" canDrive "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("both")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isOver18"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isOldEnough"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("canDrive")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("16")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("canDrive")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("20")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ol",{attrs:{start:"3"}},[a("li",[t._v("此外，原始值(Primitive Value)的比较，分别有 "),a("code",[t._v("add")]),t._v("、"),a("code",[t._v("or")]),t._v("、"),a("code",[t._v("not")]),t._v(" 分别对应。")]),a("li",[t._v("一个常见 JavaScript 写法中，"),a("code",[t._v("||")]),t._v(" 可用于取默认值，"),a("code",[t._v("&&")]),t._v(" 可用于进行短路运算。Ramda 提供 "),a("code",[t._v("defaultTo")]),t._v(" 来提供默认值的行为，并且规避 "),a("em",[t._v("为 0 时的异常行为")]),t._v("。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" defaultAge "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("defaultTo")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("18")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("defaultAge")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 18")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("defaultAge")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 18")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ol",{attrs:{start:"5"}},[a("li",[a("code",[t._v("&&")]),t._v(" 提供的短路运算不过是简化了 "),a("code",[t._v("if...else")]),t._v("，同样对于 "),a("em",[t._v("条件判断")]),t._v("(Conditionals) 的函数行为，Ramda 提供 "),a("code",[t._v("ifElse")]),t._v(" 来对应。该函数可以接收三个参数，分别是判断条件、判断为真的操作和判断为假的操作。举例来说，我们可爱的女孩们是“永葆青春”的。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" forever18 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("ifElse")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("gte")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("18")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("always")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("18")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inc"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("forever18")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("20")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 18")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("forever18")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("12")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 13")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("有点理解上的困难？让我们翻译成常规的三元运算符 "),s("code",[this._v("?...:...")]),this._v(" 的写法：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("forever18")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" age "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" age "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("18")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("18")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" age "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("含义就是，判断女孩的年龄是否大于等于(Ramda 提供 "),s("code",[this._v("gte")]),this._v(" 函数) 18 岁，判断为真，“永葆年轻”；判断为假，年龄则往上递增一岁。还记得上面的 "),s("code",[this._v("inc")]),this._v(" 函数吗，我们用它抽象了 "),s("code",[this._v("+1")]),this._v(" 这个行为。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("嗯... 总结一下，在 Ramda 中，"),a("code",[t._v("if...else")]),t._v("、"),a("code",[t._v("?...:...")]),t._v(" 和 "),a("code",[t._v("&&")]),t._v(" 短路用法都使用 "),a("code",[t._v("ifElse")]),t._v(" 函数来提供。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ol",{attrs:{start:"6"}},[a("li",[t._v("当然，Ramda 也为 "),a("code",[t._v("if...else if...else...")]),t._v(" 和 "),a("code",[t._v("switch")]),t._v(" 提供 "),a("code",[t._v("cond")]),t._v(" 这个函数来支持。该函数接收形如 "),a("code",[t._v("[predicate, transformer]")]),t._v(" 的数组。命中数组中某项的 predicate(即返回 true)，则使用对应的 transformer 进行处理；没有任何命中，返回 undefined。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fn "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("R")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("cond")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token constant"}},[t._v("R")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("equals")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{attrs:{class:"token constant"}},[t._v("R")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("always")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'water freezes at 0°C'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token constant"}},[t._v("R")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("equals")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("100")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("R")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("always")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'water boils at 100°C'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token constant"}},[t._v("R")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("T")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("           temp "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'nothing special happens at '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" temp "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'°C'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("fn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("//=> 'water freezes at 0°C'")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("fn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("50")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("//=> 'nothing special happens at 50°C'")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("fn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("100")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("//=> 'water boils at 100°C'")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"常量-constants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常量-constants","aria-hidden":"true"}},[this._v("#")]),this._v(" 常量 (Constants)")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("同样，表达常量的这一概念也可以通过函数来抽象。我们在上面也提到了，即 "),s("code",[this._v("always")]),this._v(" 函数。"),s("code",[this._v("always")]),this._v(" 的实现也非常简单，即函数返回输入本身。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("always")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" value\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("always")]),this._v(" 非常常见，几乎成了函数式编程固定的一种模式。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"identity"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#identity","aria-hidden":"true"}},[this._v("#")]),this._v(" Identity")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("identity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" id "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" id\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这是一个在编程领域和很常见的概念，"),s("em",[this._v("返回参数本身")]),this._v("。比如，在页面展示一段简介文字时，可能由于字数太长，我们可能需要对字符串进行截断，使得页面不那么难看。那么，这里的逻辑是：如果字符串大于或等于某一长度，则进行截断；否则，返回字符串本身。在 "),s("a",{attrs:{href:"#%E9%80%BB%E8%BE%91",title:"Logic"}},[this._v("Logic")]),this._v(" 中提到过 "),s("code",[this._v("ifElse")]),this._v(" 这个函数，我们可以使用它来达到我们的目的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" truncate "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("ifElse")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("propSatisfies")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("gte")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'length'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pipe")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("take")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("append")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'...'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("join")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" identity"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("truncate")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'xiaoke'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 'xiaoke'")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这是一种非常普遍的场景，因此 Ramda 就提供了 "),s("code",[this._v("when")]),this._v(" 和 "),s("code",[this._v("unless")]),this._v(" 来简化上面的式子。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" when "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("ifElse")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("propSatisfies")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("gte")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'length'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pipe")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("take")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("append")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'...'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("join")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("truncate")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'xiaoke'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 'xiaoke'")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[s("code",[this._v("both")]),this._v(" 和 "),s("code",[this._v("either")]),this._v(" 可以接收两个函数作为参数...")])])}],!1,null,null,null);s.default=e.exports}}]);