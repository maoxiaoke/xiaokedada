(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{175:function(t,e,i){"use strict";i.r(e);var r=i(0),s=Object(r.a)({},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"content"},[t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),i("p",[t._v("什么是小？")]),t._m(5),i("p",[t._v("这样做的优点是：")]),t._m(6),t._m(7),i("p",[t._v("为每一行都编写一个函数不是我们的初衷。函数应该是简练的，需要把一个函数分解为多个步骤，这些步骤的抽象程度需要保持在同一层级或者低一层级。")]),t._m(8),i("p",[t._v("函数名称简明扼要，不应该过于冗长或者简短：不在对细节刨根问题的情况下准备表达函数的含义")]),t._m(9),t._m(10),t._m(11),i("blockquote",[i("p",[t._v("参考 "),i("a",{attrs:{href:"https://dmitripavlutin.com/the-art-of-writing-small-and-plain-functions/?utm_source=codropscollective",target:"_blank",rel:"noopener noreferrer"}},[t._v("The art of writing small and plain functions"),i("OutboundLink")],1),t._v(" by "),i("a",{attrs:{href:"https://dmitripavlutin.com/author/dmitri-pavlutin/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dmitri Pavlutin"),i("OutboundLink")],1)])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"书写有用而优雅的代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#书写有用而优雅的代码","aria-hidden":"true"}},[this._v("#")]),this._v(" 书写有用而优雅的代码")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"很差的代码通常有以下特征"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#很差的代码通常有以下特征","aria-hidden":"true"}},[this._v("#")]),this._v(" 很差的代码通常有以下特征")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Functions are too long and do too many things (我不明白这部分代码是怎么工作的)")]),e("li",[this._v("Often functions have side effects that are difficult to understand or even debug (这代码写得太烂了)")]),e("li",[this._v("Unclear naming of functions and variables")]),e("li",[this._v("Fragile code: a small modification unexpectedly breaks other application components (这代码太难改了)")]),e("li",[this._v("Poor or missing code coverage")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("所以，实际上代码编程包含两块内容："),e("strong",[this._v("让应用可以运行")]),this._v(" 和 "),e("strong",[this._v("代码质量")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"函数需要-“小”"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数需要-“小”","aria-hidden":"true"}},[this._v("#")]),this._v(" 函数需要 “小”")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("第一，需要避免 "),e("em",[this._v("一个大的黑盒")]),this._v("。")]),e("li",[this._v("抽象出独立和可重用的函数。")]),e("li",[this._v("一条通用的原则是："),e("strong",[this._v("your functions should not be longer than 20 lines of code. Smaller - better.")])]),e("li",[this._v("做一件事，并且做好")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("使用了自解释的代码可增强可读性")]),e("li",[this._v("如果函数意外报错，函数的调用栈会更加清晰")]),e("li",[this._v("分隔开的函数更容易编写测试和实现更高的测试覆盖率")]),e("li",[this._v("进行功能扩展的时候(比如，想提供起来数据类型的支持)，主函数的代码不会大量增加")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"函数不是一味地小，应该是简练的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数不是一味地小，应该是简练的","aria-hidden":"true"}},[this._v("#")]),this._v(" 函数不是一味地小，应该是简练的")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"使用简明扼要的函数名称"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用简明扼要的函数名称","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用简明扼要的函数名称")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("使用小驼峰式命名法")]),e("li",[this._v("因为函数代表了动作，所以名称至少包含一个动词")]),e("li",[this._v("获取或设置属性值时，使用标准的 set 和 get 前缀")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"可靠的实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可靠的实践","aria-hidden":"true"}},[this._v("#")]),this._v(" 可靠的实践")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("至少可以从点滴做起：尽所能抽象一些东西")]),e("li",[this._v("Measure seven times, cut once.(三思而后行)")])])}],!1,null,null,null);e.default=s.exports}}]);