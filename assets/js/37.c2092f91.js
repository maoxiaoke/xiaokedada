(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{188:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),a("p",[t._v("在"),a("router-link",{attrs:{to:"./Light-FP-Categries.html#范畴的定义"}},[t._v("范畴学基础理论-范畴的定义")]),t._v("小节当中，介绍了 "),a("strong",[t._v("函数组合")]),t._v(" 的概念。在此基础上，我们将实现 "),a("code",[t._v("compose")]),t._v(" 函数。")],1),t._m(1),t._m(2),t._m(3),t._m(4),a("p",[t._v("值得注意的有两点：")]),t._m(5),t._m(6),t._m(7),t._m(8),t._m(9),t._m(10),t._m(11),a("p",[t._v("结合率(Associativity) 是范畴需要满足的条件之一，是建立在组合的基础之上的。即存在：")]),t._m(12),t._m(13),a("p",{staticStyle:{"text-align":"center"}},[t._v("ℎ∘𝑔∘𝑓 = (ℎ∘𝑔)∘𝑓 = ℎ∘(𝑔∘𝑓)")]),a("p",[t._v("为此，可以构建这样的组合函数，可以给它传入任意多的函数。")]),t._m(14),t._m(15),a("p",[t._v("// TODO: compose 的好的例子")]),t._m(16),a("p",[t._v("在 Unix-like 操作系统中，管道是通过消息传递实现 inter-process communication 的一种机制。通过 “链式模型” 来串接不同的程序或不同的组件。"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Pipeline_(Unix)",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pipeline (Unix)"),a("OutboundLink")],1)]),t._m(17),t._m(18),t._m(19),t._m(20),t._m(21),a("p",[t._v("表示为：")]),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"函数组合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数组合","aria-hidden":"true"}},[this._v("#")]),this._v(" 函数组合")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"二元-compose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二元-compose","aria-hidden":"true"}},[this._v("#")]),this._v(" 二元 Compose")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("根据概念，组合接收两个函数作为参数，并返回一个接收参数的函数，定义为 "),s("code",[this._v("compose")]),this._v(" 如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("compose")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("f")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("g")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("其中，"),a("code",[t._v("f")]),t._v(" 和 "),a("code",[t._v("g")]),t._v(" 都是函数，"),a("code",[t._v("x")]),t._v(" 是一个通过 “管道” 传输的值。且 "),a("code",[t._v("g")]),t._v(" 将先于 "),a("code",[t._v("f")]),t._v(" 执行，从而创建了一个从右到左的数据流(可以谑称“左倾”)。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[s("p",[this._v("“左倾” 很重要")])]),s("li",[s("p",[this._v("组合的优点在于 pointfree 的数据和可读性")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("pointfree")]),this._v(" 指的是："),s("strong",[this._v("函数无须提及将要操作的数据是什么样的")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"组合提高可读性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组合提高可读性","aria-hidden":"true"}},[this._v("#")]),this._v(" 组合提高可读性")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("组合就是对数学公式 "),s("code",[this._v("(𝑔∘𝑓)(𝑎) = 𝑔(𝑓(𝑎)) 𝑎 ∈ A.")]),this._v(" 的一个描述，相比于等式右侧的 “函数嵌套” 方式，函数组合显然提供了更好的代码可读性。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("g")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" n "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" n "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("f")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" n "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" n "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 函数嵌套方式")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("g")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("f")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 函数组合方式")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("compose")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"pointfree-和-data-last-style"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pointfree-和-data-last-style","aria-hidden":"true"}},[this._v("#")]),this._v(" pointfree 和 data-last style")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"结合率-associativity"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结合率-associativity","aria-hidden":"true"}},[this._v("#")]),this._v(" 结合率(Associativity)")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("compose")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("compose")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("f"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("compose")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("compose")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("g"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这一特性意味着，不管你把 "),a("code",[t._v("g")]),t._v(" 和 "),a("code",[t._v("f")]),t._v(" 分为一组，还是将 "),a("code",[t._v("h")]),t._v(" 和 "),a("code",[t._v("g")]),t._v(" 分成一组，对最终的结果都不会产生影响。再往深层思考一点，也就是：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("compose")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("fns"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" fns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("reduceRight")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("f")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在这其中，"),s("code",[this._v("reduceRight")]),this._v(" 处理参数的方式与一般的 "),s("code",[this._v("reduce")]),this._v(" 相反，即 “左倾”，从右至左的方式。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"管道-pipeline-的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#管道-pipeline-的概念","aria-hidden":"true"}},[this._v("#")]),this._v(" 管道(Pipeline) 的概念")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"实现-id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现-id","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现 Id")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("id")]),this._v(" 是一个实用的函数。即，这个函数接受什么输入然后原封不动地返回这个输入。实现非常简单：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("id")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("id")]),this._v(" 函数可以作为组合操作的 “单位元”。即：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",{staticStyle:{"text-align":"center"}},[this._v("𝑓∘1"),s("sub",[this._v("A")]),this._v(" = 𝑓 = 1"),s("sub",[this._v("B")]),this._v("∘𝑓")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("compose")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("compose")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" f\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reference","aria-hidden":"true"}},[this._v("#")]),this._v(" Reference")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"compose-with-ramda"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compose-with-ramda","aria-hidden":"true"}},[this._v("#")]),this._v(" Compose with Ramda")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("警告️⚠️")]),this._v(": 这部分不会严格遵从 Ramda 的实现方式，有些可能会简化逻辑，从而降低函数健壮性。请谨慎用于生产。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[this._v("reduceRight")]),s("li",[this._v("compose")]),s("li",[this._v("pipe")])])}],!1,null,null,null);s.default=e.exports}}]);