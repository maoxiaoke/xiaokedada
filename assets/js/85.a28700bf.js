(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{236:function(e,t,r){"use strict";r.r(t);var a=r(0),_=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"redux-初识"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux-初识","aria-hidden":"true"}},[e._v("#")]),e._v(" Redux 初识")]),r("p",[e._v("很显然，Redux 是借鉴了 Flux 思想，而非完全遵循它的一个库。")]),r("h2",{attrs:{id:"redux-和-flux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux-和-flux","aria-hidden":"true"}},[e._v("#")]),e._v(" Redux 和 Flux")]),r("h3",{attrs:{id:"来自-flux-的借鉴"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#来自-flux-的借鉴","aria-hidden":"true"}},[e._v("#")]),e._v(" 来自 Flux 的借鉴")]),r("p",[e._v("第一个借鉴的，也是很重要的一点是: "),r("strong",[e._v("单向数据流")])]),r("ol",[r("li",[e._v("在特定的地方去更新数据(在 flux 是 "),r("code",[e._v("Store")]),e._v("，在 Redux 是 "),r("code",[e._v("reducer")]),e._v(")。")]),r("li",[e._v("无法直接修改数据，而是通过 "),r("code",[e._v("Action")]),e._v(" 描述其数据数据变化。")])]),r("h3",{attrs:{id:"和-flux-的不同"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#和-flux-的不同","aria-hidden":"true"}},[e._v("#")]),e._v(" 和 Flux 的不同")]),r("ol",[r("li",[e._v("没有 "),r("code",[e._v("Dispatcher")]),e._v("。")]),r("li",[e._v("只有一个 "),r("code",[e._v("Store")]),e._v("，也就是说使用一个 "),r("code",[e._v("Store")]),e._v(" 来保存整个应用的状态。所以这也是第一点的理由，如果我们只需要一个 "),r("code",[e._v("Store")]),e._v(" 时,就可以将 "),r("code",[e._v("Store")]),e._v(" 和 "),r("code",[e._v("Dispatcher")]),e._v(" 作为相同的概念了，将 "),r("code",[e._v("Action")]),e._v(" 直接分发到 "),r("code",[e._v("Store")]),e._v("。")]),r("li",[e._v("只读的 "),r("code",[e._v("State")]),e._v("。对于 "),r("code",[e._v("Redux")]),e._v(" 而言，在 "),r("code",[e._v("Reducer")]),e._v(" 中不应该直接修改数据，而是返回一个新的对象。")])])])}],!1,null,null,null);t.default=_.exports}}]);