(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{243:function(t,e,i){"use strict";i.r(e);var s=i(0),a=Object(s.a)({},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"content"},[t._m(0),i("p",[t._v("Web 缓存有很多种，比如数据库缓存、代理服务器缓存、CDN 缓存，以及浏览器缓存。")]),i("p",[t._v("浏览器缓存指的是将缓存文件保存在客户端，一般是通过 HTTP 进行缓存。")]),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),i("p",[t._v("Cache-Control 是非常重要的规则。取值如下:")]),t._m(9),t._m(10),i("p",[t._v("应用 HTTP/1.1 版本的缓存服务器同时存在 Expires 首部字段的情况时，会优先处理 max-age 指令，而忽略 Expires 首部字段。")]),i("p",[t._v("强缓存请求数据流程如下: 客户端向缓存服务器(缓存数据库)请求数据，如果有缓存数据且未失效，则返回数据。如果没有缓存数据或缓存数据失效，则向服务器请求数据，服务器返回数据和缓存规则，客户端收到并将数据和缓存规则存入缓存。")]),t._m(11),i("p",[t._v("协商缓存的方式是客户端发送请求验证缓存标识所对应的数据是否失效，如果服务器判断数据有效，则返回一个 304 状态码(即报文首部和状态行)，而不用返回报文主体。协议中规定了两种缓存标识。")]),t._m(12),t._m(13),t._m(14),i("p",[t._v("服务器收到请求发现有 If-Modified-Since 则与被请求资源的最后修改时间进行比对，若资源的最后修改时间大于 If-Modified-Since 所提供的值，说明资源被改动过，则响应资源内容，返回状态码 200。否则，说明资源没有被改动，则返回 304，告知浏览器可以使用所保存的 cache。")]),t._m(15),t._m(16),t._m(17),i("p",[t._v("服务器收到请求发现有 If-None-Match 则与被请求资源的唯一标识进行比对，不同，说明资源被修改过，返回 200。相同，则说明资源未被修改，返回 304。")]),t._m(18),i("p",[t._v("Etag 的出现是为了解决 Last-Modified/If-Modified-Since 比较难以解决的问题。比如:")]),t._m(19),i("p",[t._v("所以，Etag 的优先级高于 Last-Modified 也是应该的。但是，性能上，Etag 要逊于 Last-Modified，因为 Last-Modified 指记录修改的时间值，而 Etag 的值需要算法计算一个 hash 值。")]),t._m(20),t._m(21),t._m(22),i("p",[t._v("对于一下操作，如地址栏回车、页面链接跳转、新开窗口、前进和回退，两种机制( expires/validation )都是有效的。")]),i("p",[t._v("F5 刷新操作，Expires/Cache-Control 是无效的，Last-Modified/Etag 是有效的，也就是说强制协商缓存。")]),i("p",[t._v("Ctrl + F5 强制刷新，两者都是无效的。")]),t._m(23),t._m(24),i("p",[t._v("参考: "),i("a",{attrs:{href:"http://www.cnblogs.com/chenqf/p/6386163.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("彻底弄懂HTTP缓存机制及原理"),i("OutboundLink")],1)]),i("hr"),t._m(25),t._m(26),i("p",[t._v("第二步， 在需要离线使用的页面中添加 manifest 属性，用于指定缓存清单文件的路径。比如:")]),t._m(27),i("hr"),t._m(28),i("p",[t._v("随着 Web 应用的出现，也产生了能够直接在客户端上存储用户信息能力的要求。")]),t._m(29),t._m(30),t._m(31),t._m(32),t._m(33),t._m(34),t._m(35),t._m(36),t._m(37),i("p",[t._v("值得注意的时，为了不会占据太多磁盘空间，每个域的 cookie 总数有限的，不同浏览器之间各有不同。此外，对于 cookie 的尺寸也有限制。")]),i("p",[t._v("另外，避免在 cookie 中存储敏感信息。")]),t._m(38),i("p",[t._v("Web Storage 是 HTML5 的一部分，目的是克服由 cookie 带来的一些限制。")]),t._m(39),t._m(40),t._m(41),i("p",[t._v("sessionStorage 对象存储特定于某个会话的数据，该数据只保持到浏览器关闭。存储在 sessionStorage 中的数据可以跨越页面刷新而存在。")]),i("p",[t._v("另外，sessionStorage 对象应该主要用于仅针对会话的小段数据的存储。如果需要跨越会话存储数据，那么 localStorage 更合适。")]),t._m(42),i("p",[t._v("存储在 localStorage 中的数据保留到通过 JavaScript 删除或者是用户清除浏览器缓存。同时，localStorage 支持同源策略。也就是说，要访问同一个 localStorage 对象，页面必须来自同一个域。")]),i("p",[t._v("同理，和其他客户端存储方案类似，Web Storage 也有大小限制，因浏览器而异。")]),t._m(43),i("p",[t._v("IndexedDB 是在浏览器中保存结构化数据的一种数据库。")]),i("p",[t._v("参考:")]),i("ul",[i("li",[t._v("《JavaScript 高级程序设计》")]),i("li",[i("a",{attrs:{href:"https://stackoverflow.com/questions/19867599/what-is-the-difference-between-localstorage-sessionstorage-session-and-cookies",target:"_blank",rel:"noopener noreferrer"}},[t._v("What is the difference between localStorage, sessionStorage, session and cookies?"),i("OutboundLink")],1)])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"web缓存知多少-缓存机制和数据存储"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web缓存知多少-缓存机制和数据存储","aria-hidden":"true"}},[this._v("#")]),this._v(" Web缓存知多少(缓存机制和数据存储)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"http-缓存机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存机制","aria-hidden":"true"}},[this._v("#")]),this._v(" HTTP 缓存机制")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("HTTP/1.1 标准中固定了 HTTP 缓存的两种方式: expiration 机制 和 validation 机制。前者是通过减少服务器和浏览器的循环次数，后者通过只响应头部信息较少网络带宽。(有些参考资料，将前者称为"),e("em",[this._v("强缓存")]),this._v("，后者称为"),e("em",[this._v("协商缓存")]),this._v(")")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("强缓存优先级高于协商缓存")]),this._v("，也就是说，当执行强缓存的规则，缓存生效，则不再执行协商缓存。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"expiration-model-强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expiration-model-强缓存","aria-hidden":"true"}},[this._v("#")]),this._v(" expiration Model -- 强缓存")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("expiration 机制通过 "),e("code",[this._v("Expires")]),this._v(" 和 "),e("code",[this._v("Cache-Control")]),this._v(" 两个字段来标明失效规则。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Expires")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Expires 的值为服务器返回的到期时间，即下一次请求时，请求时间小于服务器返回的到期时间，直接使用缓存数据。但是由于客户端和服务器可能有时间差，会导致较大的缓存命中误差，所以 HTTP/1.1 使用了 "),e("code",[this._v("Cache-Control")]),this._v(" 替代。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Cache-Control")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("private: 默认取值，表示客户端可以缓存")]),e("li",[this._v("public: 客户端和代理服务器都可以缓存")]),e("li",[this._v("max-age: 缓存内容会在 xxx 秒后失效")]),e("li",[this._v("no-cache: 缓存前确认必须先确认其有效性")]),e("li",[this._v("no-store: 所有内容都不会缓存")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("注意，Cache-Control 是一个通用的首部字段。所以，取值对客户端和服务器端含义会有所不同。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"validation-model-协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#validation-model-协商缓存","aria-hidden":"true"}},[this._v("#")]),this._v(" validation Model -- 协商缓存")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Last-Modified/If-Modified-Since")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("客户端第一次请求服务器时，服务器在响应报文的首部通过 "),e("code",[this._v("Last-Modified")]),this._v(" 字段告知浏览器资源的最后修改时间。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("再次请求时，客户端在请求报文的首部添加 "),e("code",[this._v("If-Modified-Since")]),this._v(" 字段，该字段的值是上次请求时，服务器返回的 "),e("code",[this._v("Last-Modified")]),this._v(" 的值。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Etag/If-None-Match")]),this._v(" 优先级高于 Last-Modified/If-Modified-Since")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("客户端第一次请求服务器时，服务器在响应报文的首部通过 "),e("code",[this._v("Etag")]),this._v(" 字段告知浏览器当前资源在服务器的唯一标识(生成规则由服务器决定)。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("同理，再次请求时，缓存数据的唯一标识被添加到请求报文的 "),e("code",[this._v("If-None-Match")]),this._v(" 字段中。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("为什么需要 Etag?")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("一些文件会周期性地更改，但是内容并不会改变，只是改变修改时间，这个时候我们不太需要客户端认为文件内容被修改过了，而请求资源")]),e("li",[this._v("某些文件修改非常频繁(指的是内容)，比如每秒之内修改了多次，If-Modified-Since 能检查到的粒度是秒级，这种修改可能导致无法判定。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"http-缓存过程总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存过程总结","aria-hidden":"true"}},[this._v("#")]),this._v(" HTTP 缓存过程总结")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("浏览器第一次加载资源，服务器返回 200，并将数据和缓存规则存入缓存。")]),e("li",[this._v("再次请求资源时，如果当前时间和上一次返回 200 的时间差不超过 Cache-Control 设置的 max-age，则没有过期，命中缓存(如果浏览器不支持 HTTP/1.1，则用 expires 判断是否过期)。如果时间过期，则向服务器发送 If-None-Match 和 If-Modified-Since 请求。")]),e("li",[this._v("服务器收到请求，首先根据 Etag 的值判断被请求的文件有没有被修改，Etag 值一致，则命中协商缓存，返回304；如果不一致，返回新的资源的缓存规则和状态码，并返回 200。")]),e("li",[this._v("如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求的文件的最后修改时间做对比，一致则命中协商缓存，返回 304；否则返回新的 Last-Modified 和数据，返回 200。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"用户操作对缓存的影响"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用户操作对缓存的影响","aria-hidden":"true"}},[this._v("#")]),this._v(" 用户操作对缓存的影响")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("抓包工具: Fiddler")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("查看 chrome 缓存 "),e("code",[this._v("chrome://view-http-cache/")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"html5-应用缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html5-应用缓存","aria-hidden":"true"}},[this._v("#")]),this._v(" HTML5 应用缓存")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("应用缓存(application cache)，简称 appcache，是专门为开发离线 Web 应用设计的。它是从浏览器的缓存中分出来的一块缓存区，使用一个 "),e("code",[this._v("manifest")]),this._v(" 文件，列出要下载和缓存的资源。")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"language-html extra-class"},[i("pre",{pre:!0,attrs:{class:"language-html"}},[i("code",[i("span",{attrs:{class:"token tag"}},[i("span",{attrs:{class:"token tag"}},[i("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),t._v(" "),i("span",{attrs:{class:"token attr-name"}},[t._v("manifest")]),i("span",{attrs:{class:"token attr-value"}},[i("span",{attrs:{class:"token punctuation"}},[t._v("=")]),i("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/offline.manifest"),i("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),i("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"数据存储"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据存储","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据存储")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Cookie 是在"),e("strong",[this._v("客户端")]),this._v("存储数据的其中一种选项。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"cookie"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie","aria-hidden":"true"}},[this._v("#")]),this._v(" Cookie")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Cookie 的工作机制是用户识别及状态管理。它是怎样工作的呢？比如，当要对某个用户进行识别的时候，服务器对任意的 HTTP 请求发送 "),e("code",[this._v("Set-Cookie")]),this._v(" 首部字段作为响应的一部分。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("HTTP/1.1 200 OK\nContent-type: text/html\nSet-Cookie: name=value\n...\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这之后，浏览器的每个请求都添加 "),e("code",[this._v("Cookie")]),this._v(" 字段将信息发送回服务器。服务器就知道你是属于哪个用户了。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("GET /index.html HTTP/1.1\nCookie: name=value\n...\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Set-Cookie")]),this._v(" 字段的属性")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("name 名称 一个唯一确定的 cookie 的名称，名称必须被 URL 编码")]),e("li",[this._v("value 值 存储在 cookie 中的字符串的值。值必须被 URL 编码")]),e("li",[this._v("domain 域名 确定 cookie 有效的域，所有向该域发送的请求中都包含这个 cookie 信息")]),e("li",[this._v("path 路径 对于制定域中的那个路径，才应该向服务器发送 cookie")]),e("li",[this._v("expire 失效时间")]),e("li",[this._v("secure 安全标识 指定后，cookie 只能在使用 SSL 连接时(即HTTPS通信时)才发送到服务器")]),e("li",[this._v("HttpOnly 它使得附加在 HttpOnly 属性后的 Cookie 内容无法被 JavaScript 读取，可以防止 XSS 攻击")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Cookie")]),this._v(" 字段只包含 "),e("code",[this._v("Cookie")]),this._v(" 属性。该属性在请求中包含从服务器接收到的 Cookie，接收到多个 Cookie 时，同样可以以多个 Cookie 形式发送。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"web-storage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web-storage","aria-hidden":"true"}},[this._v("#")]),this._v(" Web Storage")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("提供一种在 cookie 之外存储会话数据的途径")]),e("li",[this._v("提供一种存储大量可以"),e("strong",[this._v("跨会话")]),this._v("存在的数据的机制")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Web Storage 提供两种用于存储数据的对象，"),e("code",[this._v("sessionStorage")]),this._v(" 对象和 "),e("code",[this._v("localStorage")]),this._v(" 对象。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"sessionstorage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sessionstorage","aria-hidden":"true"}},[this._v("#")]),this._v(" sessionStorage")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"localstorage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#localstorage","aria-hidden":"true"}},[this._v("#")]),this._v(" localStorage")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"indexeddb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#indexeddb","aria-hidden":"true"}},[this._v("#")]),this._v(" IndexedDB")])}],!1,null,null,null);e.default=a.exports}}]);